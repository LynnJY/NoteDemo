<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="逻辑漏洞分类" _note="业务流程逻辑点可能包括一下内容：&#10;&#10;-   用户身份验证：在用户登录网站时，业务流程通常包括一个用户身份验证逻辑点。在这个点上，系统会验证用户提供的凭据（如用户名和密码），以确定用户是否有权访问其帐户。&#10;&#10;-   会话管理：对于已经登录的用户，业务流程中可能会包括会话管理逻辑点。这用于跟踪用户的会话状态，以确保他们在登录后能够访问其帐户和相关资源，而不需要重复身份验证。&#10;&#10;-   角色和权限：网站通常会根据用户的角色和权限来管理其访问权限。业务流程逻辑点可以包括检查用户角色和权限以确定他们是否有权执行特定操作或访问特定页面。&#10;&#10;-   资源访问：在一些情况下，业务流程可能需要检查用户的权限和访问控制列表，以确定他们是否有权访问特定的资源，如文件、图像、数据库记录等。&#10;&#10;-   交易和支付：对于电子商务网站，业务流程逻辑点可能包括处理支付、订单确认和交付的逻辑。这些点用于确保只有经过授权的用户才能完成交易。&#10;&#10;-   密码重置和安全设置：当用户请求密码重置或更改其安全设置时，业务流程逻辑点用于验证用户身份并执行相应的操作。&#10;&#10;-   日志记录和审计：业务流程逻辑点还可以用于记录用户的活动，以便进行审计和安全监控">
</outline>
<outline text="业务逻辑点" _note="-   URL参数：某些业务逻辑点可能以URL参数的形式传递给服务器。例如，网站可以使用URL参数来指定用户的身份认证状态或请求的页面。&#10;&#10;-   HTTP请求头：用户身份验证信息通常以HTTP请求头中的“Authorization”字段传递给服务器。（Authorization是一个HTTP安全请求首部，包含了客户端提供给服务器便于对其自身进行认证的数据）&#10;&#10;-   HTTP请求正文：某些逻辑点需要从HTTP请求正文中的JSON、XML或其他数据格式中提取。这可能包括用户提交的表单数据或API请求中的参数。&#10;&#10;-   Cookies：会话管理逻辑点通常使用Cookies来跟踪用户的会话状态。服务器可以在Cookies中存储会话令牌或标识符&#10;&#10;-   数据库记录：业务逻辑点可以在数据库中存储和管理，例如，用户的角色和权限信息、订单状态、产品库存等。&#10;&#10;-   服务器端会话状态：会话管理逻辑点可能依赖于服务器端的会话状态来维护用户的登录状态和会话信息。这些信息通常存储在服务器内存或数据库中。&#10;&#10;-   客户端状态：一些逻辑点可能需要维护客户端状态，如JavaScript中的变量或浏览器本地存储。&#10;&#10;-   日志文件：日志记录和审计逻辑点通常会将用户活动记录到服务器的日志文件中以供后续审计和监控。&#10;&#10;-   后端应用程序代码：许多逻辑点是通过后端应用程序代码来实现和管理的，例如，用户身份验证、角色和权限检查、资源访问控制等。&#10;&#10;-   前端应用程序代码：一些逻辑点可能在前端应用程序中处理，例如，动态内容控制、用户界面的渲染和交互等">
</outline>
<outline text="业务逻辑的重要性" _note="&#10;常见的OWASP漏洞，通过漏洞扫描工具，大多支持自动化或者半自动化扫描出来；并且传统的安全防御设备和措施收效甚微.&#10;&#10;但逻辑漏洞属于和系统自身功能和逻辑有关系的漏洞，每一家的漏洞出现可能存在一定的独特性，很难复制或者通过规则通过脚本扫描，因此逻辑漏洞大多需要配合代码审计和手动测试才可发现相关漏洞，也是工具无法完全替代人所作的一类漏洞.">
</outline>
<outline text="利用工具" _note="&gt; 利用工具简单：&#10;&gt;&#10;&gt; 数据包抓取工具（Burpsuit、fiddler等）&#10;&gt;&#10;&gt; 浏览器插件&#10;&gt;&#10;&gt; 思路复杂：&#10;&gt;&#10;&gt; 核心：绕过真实用户身份或正常业务流程达到预期的目的">
</outline>
<outline text="挖掘思路" _note="-   边界条件测试：案例：一个在线电商网站允许用户设置购物车中的商品数量。攻击者尝试添加负数或极大的数量，以查看是否可以绕过购物车中商品数量的合法性检查。如果能够添加超过库存数量的商品，就可能导致库存错误或不正当购物。&#10;&#10;-   反向思考：案例：，一个在线银行应用程序允许用户转账。攻击者反向思考，考虑如何在不足额度的情况下执行转账，或者如何绕过二次确认步骤来完成未经授权的交易。&#10;&#10;-   交叉验证：案例：一个在线社交媒体平台允许用户删除其发布的帖子。攻击者在删除自己的帖子后立即尝试将其恢复。通过比较删除和恢复之后的状态，攻击者可以查看是否存在一致性问题。&#10;&#10;-   历史数据分析：案例：一个电子邮件服务提供商分析历史登录记录，发现在用户帐户被冻结后，仍然存在多次登录尝试的记录。这表明存在可能的业务逻辑漏洞，导致帐户仍然可以访问。&#10;&#10;-   颠倒顺序：案例：一个在线预订系统要求用户先选择日期，然后选择座位。攻击者尝试在未选择日期的情况下选择座位，以查看是否可以绕过日期选择步骤。&#10;&#10;-   重复操作：案例：一个在线投票系统允许用户投票一次。攻击者尝试多次投票，查看是否可以绕过投票限制，从而影响投票结果。&#10;&#10;-   越权操作：案例：一个医疗记录系统允许医生查看患者的病历。攻击者尝试使用患者的帐户登录，并查看其他患者的病历，以测试是否存在越权漏洞。&#10;&#10;-   并发操作：案例：：一个在线购物平台允许多个用户同时购买同一商品。攻击者模拟多个用户同时购买相同商品，以查看是否存在库存不一致或订单处理问题。&#10;&#10;-   审查业务逻辑代码：案例：安全研究人员审查一个电子投票应用程序的代码，发现在投票结束后，没有正确停止接受新的投票。这导致在投票已结束的情况下仍然能够提交投票，可能影响选举结果。">
</outline>
<outline text="验证码安全">
  <outline text="验证码原理" _note="-   验证码（Captcha）是一种广泛用于互联网应用程序中的安全机制，旨在验证用户是真实的人类而不是自动化程序或恶意机器人。验证码的原理是通过提出一些对人类容易回答但对计算机难以回答的问题，来阻止自动化攻击和恶意行为。原理如下：&#10;&#10;-   图像识别：验证码通常以图像或图形的形式呈现给用户，包括数字、字母、特殊字符或图案。用户需要识别并输入验证码中显示的内容。&#10;&#10;-   随机性：验证码的生成通常具有一定的随机性，以增加攻击者猜测的难度。每个验证码可能会随机选择字符、颜色、字体和位置等属性。&#10;&#10;-   失真和噪声：为了增加图像识别的难度，验证码图像通常会添加一些失真、扭曲和噪声，使图像更难以被光学字符识别（OCR）或自动化脚本识别。&#10;&#10;-   时间限制：验证码通常有一个时间限制，要求用户在一定时间内完成识别和输入。">
  </outline>
  <outline text="验证码绕过" _note="验证码不刷新或无效:&#10;&#10;&gt; 手工尝试一次登录后，在某一时间段内无论登录失败多少次，只要不刷新页面Session不过期，就可以无限次的使用同一个验证码来对一个或多个用户帐号进行暴力猜解&#10;&#10;验证码复用:&#10;&#10;&gt; 当你打开常见的类的系统，通常系统会自动请求一次验证码，抓包抓任别放，保持Session不变。&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316214913851.png &quot;fig:&quot;)&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316215024059.png &quot;fig:&quot;)&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316215054700.png &quot;fig:&quot;)&#10;&#10;卡住包在重放模块无限爆破&#10;&#10;存在无验证码页面:&#10;&#10;&gt; 经过测试，如果我们发现网站验证码自身并不存在缺陷，那我们接下来就可以尝试寻找一些其他的登录页面或接口来尝试暴力破解。如隐藏的页面、测试页面、老日版本的页面等。&#10;&gt;&#10;&gt; 查看源代码，发下如下接口无需验证码，可用来爆破：&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316215235470.png &quot;fig:&quot;)&#10;&#10;万能验证码:&#10;&#10;&gt; 渗透测试的过程中，有时候会出现这种情况，系统存在一个万能验证码，如0000、9999，只要输入万能验证码，点就可以无视验证码进行暴力破解&#10;&gt;&#10;&gt; 可能在开发或者软件测试过程中留下的方便测试&#10;&#10;验证码数量有限:&#10;&#10;&gt; 多见于计算类型的验证码，如1+2=？，这种类型的验证码严格意义上来说不能叫做验证码，多刷新几次验证码，我们可能会发现系统中的算数题自只有那么几道，这种情况下只要将验证码全部下载下来，生成一个md5库，然后将前端生成的验证码与本地文件进行对比即可">
  </outline>
  <outline text="简单图片验证码识别:" _note="&gt; 在平常的漏洞挖掘过程中，如果我们发现登录的验证码非常简单且易于识别，那我们就可以尝试使用自动化工具来进行登录破解了，如PKAV的HTTPFuzzer、bp插件等。&#10;&gt;&#10;&gt; &lt;https://github.com/f0ng/captcha-killer-modified(&gt;插件地址)&#10;&gt;&#10;&gt; &lt;https://blog.csdn.net/yaoguangyang05/article/details/129066400(&gt;插件使用教学)&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316215515206.png &quot;fig:&quot;)">
  </outline>
  <outline text="短信验证码:" _note="-   短信验证码生命期限内可暴力枚举&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316221845705.png &quot;fig:&quot;)&#10;&#10;-   短信验证码在数据包中返回&#10;&#10;&gt; 可以直接在response中获取到短信验证码&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316222004782.png &quot;fig:&quot;)&#10;&#10;-   修改请求数据包参数或Cookie值绕&#10;&#10;&gt; 比如有post数据包：mobile=18888888888&amp;userid=00001,Cookie中有：codeltype=1&#10;&gt;&#10;&gt; 在特定步骤，修改mobile=自己的手机号，自己手机就可以收到别人的验证码，后面再用别人的手机号和接收到的验证码登录；&#10;&gt;&#10;&gt; 修改Cookie中可疑的参数和值，进行绕过，比如上面修改codetype=0;&#10;&#10;-   修改返回包绕过&#10;&#10;&gt; 举个简单的例子：提交错误的短信验证码，返回包中有：status=false，用Burpsuite的“Dointercept&quot;功能修改为status=true，即可绕过前端判断，成功进入系统。具体还要结合实际的场景，灵活操作。&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316222210506.png &quot;fig:&quot;)&#10;&#10;-   攻破短信验证码接口(这个算扯淡,除了搞搞同学的)&#10;&#10;&gt; 1、有些网站会遗留短信验证码测试页面，比如/smstest.html等，如果能找到并且还可以正常使用。&#10;&gt;&#10;&gt; 2、一般系统的短信验证码功能，都会有个接口平台可以获取到手机接收到的所有短信，找到并攻破也能进入系统。&#10;&#10;-   默认万能验证码&#10;&#10;&gt; 之前遇到过短信验证码输入9999，就可以登录任意用户账号的漏洞。为了方便测试以及维护，有的系统会留有万能验证码，上线后还保留着。可能是固定的写在配置文件、js文件或代码中，也可能是随时间变化的。&#10;&#10;-   验证码无校验&#10;&#10;&gt; 任意密码重置，随意输入验证码就可以修改别人用户的密码，就直接得到了其他用户的账号，危害十分巨大&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316222351274.png &quot;fig:&quot;)">
  </outline>
</outline>
<outline text="身份认证安全" _note="-   暴力破解&#10;&#10;&gt; 在没有验证码限制或者一次验证码可以多次使用的地方使用已知用户对密码进行暴力破解或者用一个通用密码对用户进行暴力破解。简单的验证码爆破。些工具及脚本：BurpsuitehtpwdScan撞库爆破必备URL:&lt;https://github.com/lijiejie/htpwdScanhydra&gt;源码安装xhydra支持更多的协议去爆破（可破WEB，其他协议不属于业务安全的范畴）&#10;&#10;-   session&amp;cookie类&#10;&#10;&gt; 会话固定攻击：利用服务器的session不变机制，借他人之手获得认证和授权，冒充他人。Cookie仿冒：修改cookie中的某个参数可以登录其他用户（Chrome插件：EditThisCookie）&#10;&#10;-   弱加密&#10;&#10;&gt; 前端加密，可破解，或者根本就不是加密。比如如下案例，找回密码，得到一个token：/resetpwd?token=eyJ1c2VybmFtZSl6lnpoYW5nZij9Token实际上就是将username编码了一下，修改username即可修改其他用户的密码">
</outline>
<outline text="密码找回" _note="-   密码找回逻辑一般流程&#10;&#10;&gt; 1.首先尝试正常密码找回流程，选择不同找回方式，记录所有数据包&#10;&gt;&#10;&gt; 2.分析数据包，找到敏感部分&#10;&gt;&#10;&gt; 3.分析后台找回机制所采用的验证手段&#10;&gt;&#10;&gt; 4.修改数据包验证推测&#10;&#10;-   验证码暴力破解&#10;&#10;&gt; 手机或者邮箱验证码可枚举破解&#10;&#10;-   验证码直接返回&#10;&#10;-   跳过验证步骤&#10;&#10;&gt; 举例:不必输入验证码，直接将链接中的step2改为step3&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316223314506.png &quot;fig:&quot;)&#10;&#10;-   利用邮箱、手机号绑定&#10;&#10;&gt; 抓包进行修改&#10;&#10;-   第三方登录绑定其他用户&#10;&#10;-   没有验证验证码接受手机号是否与username或者session一致&#10;&#10;-   本地验证绕过&#10;&#10;&gt; 客户端在本地进行验证码是否正确的判断，而该判断结果也可以在本地修改最终导致欺骗客户端，误以为我们已经输入了正确的验证码。例如将返回包中的0修改为1即可绕过验证。&#10;&#10;-   重置密码最后一步uid或者username可控&#10;&#10;-   个人中心修改密码逻辑错误&#10;&#10;&gt; 当前密码的校验和修改新密码是单独分开的两个包。所以可以理解为没有校验当前密码。修改密码的请求中如下：Ssouid=***&amp;passwd=***修改该ssouid即可。原因：密码修改过程中没有校验当前密码，只需要通过修改ssouid（可能是用户标识）来更改密码，而不需要提供当前密码&#10;&#10;-   利用session重新绑定客户&#10;&#10;&gt; 重置密码最后一步是通过session获取用户名，然后再重置。而用户名是在重置密码第一步时与session进行绑定那么如果重置密码的最后一步程序并没有验证该用户是够走完了验证流程那么就可以通过重新绑定session为其他账号从而达到任意密码重置目的&#10;&#10;-   去掉验证参数绕过&#10;&#10;&gt; 邮件系统取回密码功能设计逻辑错误，存在认证绕过漏洞通过抓取数据包可通过修改报文，将找回问题答案参数删除后，直接进行对密码更改。&#10;&#10;-   任意输入验证码修改用户密码">
  <outline text="行业划分" _note="-   互联网行业&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316223741562.png &quot;fig:&quot;)&#10;&#10;-   金融行业&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316223813691.png &quot;fig:&quot;)&#10;&#10;-   电商行业&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316223836745.png &quot;fig:&quot;)&#10;&#10;-   政务行业&#10;&#10;![](C:/Users/Lynn/AppData/Roaming/Typora/typora-user-images/image-20250316223901239.png &quot;fig:&quot;)&#10;&#10;\## 用户输入合规性">
  </outline>
</outline>
  </body>
</opml>
